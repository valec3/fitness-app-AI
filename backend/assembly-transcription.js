/**
 * M√≥dulo de transcripci√≥n usando AssemblyAI
 * Procesa archivos de audio y los convierte a texto
 */

const fs = require("fs");
const path = require("path");
const { AssemblyAI } = require("assemblyai");

class AssemblyAITranscription {
  constructor() {
    this.client = new AssemblyAI({
      apiKey: "d021f22b69ab41e0a8526d029cb362a3",
    });
    this.isInitialized = false;
  }

  /**
   * Inicializa el m√≥dulo de transcripci√≥n
   */
  async initialize() {
    try {
      console.log("‚úÖ M√≥dulo de transcripci√≥n AssemblyAI inicializado");
      this.isInitialized = true;
      return true;
    } catch (error) {
      console.error("‚ùå Error inicializando transcripci√≥n:", error.message);
      return false;
    }
  }

  /**
   * Transcribe un archivo de audio a texto usando AssemblyAI
   */
  async transcribeAudio(audioPath) {
    try {
      if (!this.isInitialized) {
        throw new Error("M√≥dulo de transcripci√≥n no inicializado");
      }

      console.log("üé§ Iniciando transcripci√≥n con AssemblyAI...");
      console.log("üìÅ Archivo de audio:", audioPath);

      // Verificar que el archivo existe
      if (!fs.existsSync(audioPath)) {
        throw new Error(`Archivo de audio no encontrado: ${audioPath}`);
      }

      // Par√°metros para la transcripci√≥n
      const params = {
        audio: audioPath,
        speech_model: "universal",
        language_code: "es", // Espa√±ol
      };

      console.log("üîÑ Enviando archivo a AssemblyAI...");

      // Realizar la transcripci√≥n
      const transcript = await this.client.transcripts.transcribe(params);

      // Verificar si la transcripci√≥n fue exitosa
      if (transcript.status === "error") {
        throw new Error(`Error en AssemblyAI: ${transcript.error}`);
      }

      const transcriptionText = transcript.text || "";
      console.log("‚úÖ Transcripci√≥n completada:", transcriptionText);

      return {
        success: true,
        text: transcriptionText,
        timestamp: new Date().toISOString(),
        confidence: transcript.confidence || 0,
      };
    } catch (error) {
      console.error("‚ùå Error en transcripci√≥n:", error.message);
      return {
        success: false,
        error: error.message,
        text: "",
      };
    }
  }
}

module.exports = AssemblyAITranscription;
